<?php

/**
 * @file
 * Support for configurable user profiles.
 */

/**
 * @todo:
 *
 * 1. Help text
 * 2. Registration form
 * 3. Unit tests
 * 4. Upgrade path - migrate from D7
 *
 */


use Drupal\Core\Entity\Display\EntityDisplayInterface;
use Drupal\profile2\Entity\Profile;
use Drupal\profile2\Entity\ProfileType;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Component\Utility\String;
use Drupal\Core\Url;
use \Drupal\profile2\Controller\ProfileController;
use Drupal\field\FieldInstanceConfigInterface;


/**
 * Implements hook_help().
 */
//function profile2_help($route_name, Request $request) {
//  switch ($route_name) {
//
//  }
//}

/**
 * Entity URI callback for profiles.
 *
 * @param Drupal\profile2\Entity\Profile $profile
 *   A profile entity.
 */
//function profile2_profile_uri(Profile $profile) {
//  $uri = entity_load('user', $profile->uid)->uri();
//  $uri['options']['fragment'] = 'profile-' . $profile->bundle();
//  return $uri;
//}

/**
 * Entity URI callback for profile types.
 *
 * @param Drupal\profile2\Entity\ProfileType $profile_type
 *   A profile type entity.
 */
//function profile2_profile_type_uri(ProfileType $profile_type) {
//  return array(
//    'path' => 'admin/people/profiles/manage/' . $profile_type->id(),
//  );
//}

function profile2_type_load($id, $reset = FALSE) {
  return entity_load('profile2_type', $id, $reset);
}

function profile2_load_multiple(array $pids = NULL, $reset = FALSE) {
  if ($reset) {
    \Drupal::entityManager()->getStorage('profile2')->resetCache($pids);
  }
  return Profile::loadMultiple($pids);
}

function profile2_load($pid = NULL, $reset = FALSE) {
  if ($reset) {
    \Drupal::entityManager()->getStorage('profile2')->resetCache(array($pid));
  }
  return Profile::load($pid);
}

/**
 * Implements hook_permission().
 */
function profile2_permission() {
  $permissions = array(
    'administer profile types' => array(
      'title' => t('Administer profile types'),
      'restrict access' => TRUE,
    ),
    'bypass profile access' => array(
      'title' => t('Bypass profile access'),
      'description' => t('View and edit all user profiles, including private field values.'),
      'restrict access' => TRUE,
    ),
  );

  foreach (ProfileType::loadMultiple() as $type) {
    $permissions += array(
      "add own {$type->id()} profile" => array(
        'title' => t('%type: Add own profile', array('%type' => $type->label())),
      ),
      "add any {$type->id()} profile" => array(
        'title' => t('%type: Add any profile', array('%type' => $type->label())),
      ),
      "view own {$type->id()} profile" => array(
        'title' => t('%type: View own profile', array('%type' => $type->label())),
      ),
      "view any {$type->id()} profile" => array(
        'title' => t('%type: View any profile', array('%type' => $type->label())),
      ),
      "edit own {$type->id()} profile" => array(
        'title' => t('%type: Edit own profile', array('%type' => $type->label())),
      ),
      "edit any {$type->id()} profile" => array(
        'title' => t('%type: Edit any profile', array('%type' => $type->label())),
      ),
      "delete own {$type->id()} profile" => array(
        'title' => t('%type: Delete own profile', array('%type' => $type->label())),
      ),
      "delete any {$type->id()} profile" => array(
        'title' => t('%type: Delete any profile', array('%type' => $type->label())),
      ),
    );
  }
  return $permissions;
}

/**
 * Implements hook_user_view().
 */
/**
 * Implements hook_user_view().
 */
function profile2_user_view(array &$build, UserInterface $account, EntityViewDisplayInterface $display, $view_mode, $langcode) {
  // Only attach profiles for the full account view.
  if ($view_mode != 'full') {
    return;
  }
  // Position profiles at the bottom of account page.
  $weight = 100;
  foreach (\Drupal::configFactory()
             ->listAll('profile2.type.') as $config_name) {
    $config = \Drupal::config($config_name);

    $profiles = entity_load_multiple_by_properties('profile2', array(
      'uid' => $account->id(),
      'type' => $config->get('id'),
    ));

    if (isset($profiles)) {
      $build['profiles']['#weight'] = $weight + $config->get('weight');
      $build['profiles'][$config->get('id')] = array(
        '#theme' => 'profile_items',
        '#profile_items' => $profiles,
        '#profile_type' => $config->get('label'),
      );
    }
  }
  $build['#attached']['library'][] = 'profile2/drupal.profile2-items';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add available profile forms to the user registration form.
 *
 */
function profile2_form_user_register_form_alter(&$form, &$form_state) {
  foreach (\Drupal::configFactory()
             ->listAll('profile2.type.') as $config_name) {
    $config = \Drupal::config($config_name);
    if ($config->get('registration') === TRUE) {

      if (empty($form_state['profiles'][$config->get('id')])) {
        $langcode = $config->get('langcode');
        $values = array(
          'type' => $config->get('id'),
          'langcode' => $langcode ? $langcode : \Drupal::languageManager()
            ->getDefaultLanguage()->id
        );
        // Create pseudo profile entity.
        $form_state['profiles'][$config->get('id')] = entity_create('profile2', $values);
      }

      profile2_attach_form($form, $form_state);

      // Wrap each profile form in a fieldset.
      $form['profile'][$config->get('id')] += array(
        '#type' => 'details',
        '#title' => $config->get('label'),
        '#weight' => 100,
        '#open' => TRUE,
      );

      if (!empty($form_state['profiles'])) {
        $form['actions']['submit']['#validate'][] = 'profile2_form_user_register_form_validate';
        $form['actions']['submit']['#submit'][] = 'profile2_form_user_register_form_submit';
      }
    }
  }

  if (!empty($form_state['profiles'])) {
    $form['actions']['submit']['#validate'][] = 'profile2_form_user_register_form_validate';
    $form['actions']['submit']['#submit'][] = 'profile2_form_user_register_form_submit';
  }
}

/**
 * Attaches the profile forms of the profiles set in $form_state['profiles'].
 *
 * Modules may alter the profile2 entity form regardless to which form it is
 * attached by making use of hook_form_profile2_form_alter().
 *
 * @param $form
 *   The form to which to attach the profile2 form. For each profile the form
 *   is added to @code $form['profile'][$profile->type] @endcode. This helper
 *   also adds in a validation and a submit handler caring for the attached
 *   profile forms.
 *
 * @see profile2_form_user_register_form_validate()
 * @see profile2_form_user_register_form_submit()
 */
function profile2_attach_form(&$form, &$form_state) {
  foreach ($form_state['profiles'] as $bundle => $profile) {
    $form['profile'][$bundle]['#tree'] = TRUE;
    $form['profile'][$bundle]['#parents'] = array('profile', $bundle);

    // Attach fields
    $field_definitions = \Drupal::entityManager()
      ->getFieldDefinitions('profile2', $bundle);
    $instances = array_filter($field_definitions, function ($field_definition) {
      return $field_definition instanceof FieldInstanceConfigInterface;
    });

    if (!empty($instances)) {
      $fields = array_keys($instances);
      array_push($fields, 'label');

      $profileForm = \Drupal::service('entity.form_builder')->getForm($profile);
      foreach ($fields as $field) {
        // Remove unwanted form elements.
        $entity_elements = array(
          '#id',
          '#name',
          '#field_name',
          '#value',
          '#field_parents',
          '#array_parents',
          '#parents'
        );
        foreach ($entity_elements as $entity_element) {
          unset($profileForm[$field]['widget'][0]['value'][$entity_element]);
        }
        $form['profile'][$bundle][$field] = $profileForm[$field]['widget'][0]['value'];
      }
    }
    else {
      $form['profile'][$bundle]['message'] = array(
        '#access' => \Drupal::currentUser()
          ->hasPermission('administer profile types'),
        '#markup' => t('No fields have been associated with this profile type. Go to the <a href="!url">Profile types</a> page to add some fields.', array('!url' => url('admin/people/profiles'))),
      );
    }
    // Provide a central place for modules to alter the profile forms, but
    // skip that in case the caller cares about invoking the hooks.
    if (!isset($form_state['profile2_skip_hook'])) {
      $hooks = array();
      $hooks[] = 'form_' . $bundle . '_profile2_form';
      $hooks[] = 'form_profile2_form';
      \Drupal::moduleHandler()
        ->alter($hooks, $form['profile'][$bundle], $form_state);
    }
  }
}

/**
 * Validation handler for the profile form.
 *
 * @see profile2_attach_form()
 */
function profile2_form_user_register_form_validate($form, &$form_state) {
  foreach ($form_state['profiles'] as $bundle => $profile) {
    if (isset($form_state['values']['profile'][$bundle])) {
      $pseudo_entity = entity_create('profile2', array_merge($form_state['values']['profile'][$bundle], array(
        'type' => $bundle,
      )));
      // @todo:
      $profileForm = \Drupal::service('entity.form_builder')->getForm($pseudo_entity);
      $profileForm['#process'][1][0]->validateFormValues($pseudo_entity, $profileForm, $form_state);
    }
  }
}

/**
 * Submit handler that builds and saves all profiles in the form.
 *
 * @see profile2_attach_form()
 */
function profile2_form_user_register_form_submit($form, &$form_state) {
  // During registration set the uid field of the newly created user.
  $account = $form_state['controller']->getEntity();
  foreach ($form_state['profiles'] as $bundle => $profile) {
    $profileEntity = entity_create('profile2', array_merge($form_state['values']['profile'][$bundle], array(
      'type' => $bundle,
      'uid' => $account->id(),
    )));
    $profileEntity->save();
    // Remove old unsaved profile entity.
    unset($form_state['profiles'][$bundle]);
  }
}

/**
 * Returns a list of all the available profile types.
 *
 * This list can include types that are queued for addition or deletion.
 *
 * @return \Drupal\profile2\ProfileTypeInterface[]
 *   An array of profile type entities, keyed by ID.
 *
 * @see profile2_type_load()
 */
function profile2_type_get_types() {
  return entity_load_multiple('profile2_type');
}

/**
 * Implements hook_theme().
 */
function profile2_theme() {
  return array(
    'profile_items' => array(
      'variables' => array('profile_items' => NULL, 'profile_type' => NULL),
      'template' => 'profile-items',
    ),
  );
}

/**
 * Implements hook_preprocess_HOOK() for profile templates.
 */
function template_preprocess_profile_items(&$variables) {
  if (count($variables['profile_items'])) {
    $variables['title'] = String::checkPlain($variables['profile_type']);
    foreach ($variables['profile_items'] as $profile_item) {
      $variables['items'][] = entity_view($profile_item, 'default');
      $variables['edit_links'][] = \Drupal::linkGenerator()
        ->generateFromUrl(t('Edit'), new Url("profile2.account_edit_profile", array(
          'user' => \Drupal::currentUser()->id(),
          'type' => $profile_item->bundle(),
          'id' => $profile_item->id(),
        )));
      $variables['delete_links'][] = \Drupal::linkGenerator()
        ->generateFromUrl(t('Delete'), new Url("profile2.account_delete_profile", array(
          'user' => \Drupal::currentUser()->id(),
          'type' => $profile_item->bundle(),
          'id' => $profile_item->id(),
        )));
    }
  }
}
