<?php

/**
 * @file
 * Support for configurable user profiles.
 */

/**
 * @todo:
 *
 * 1. Help text
 * 2. Registration form
 * 3. Unit tests
 * 4. Upgrade path - migrate from D7
 *
 */

use Drupal\profile2\Entity\Profile;
use Drupal\profile2\Entity\ProfileType;
use Drupal\user\UserInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Component\Utility\String;
use Drupal\Core\Url;
use Drupal\entity\Entity\EntityFormDisplay;

/**
 * Implements hook_help().
 */
//function profile2_help($route_name, Request $request) {
//  switch ($route_name) {
//
//  }
//}

/**
 * Entity URI callback for profiles.
 *
 * @param Drupal\profile2\Entity\Profile $profile
 *   A profile entity.
 */
//function profile2_profile_uri(Profile $profile) {
//  $uri = entity_load('user', $profile->uid)->uri();
//  $uri['options']['fragment'] = 'profile-' . $profile->bundle();
//  return $uri;
//}

/**
 * Entity URI callback for profile types.
 *
 * @param Drupal\profile2\Entity\ProfileType $profile_type
 *   A profile type entity.
 */
//function profile2_profile_type_uri(ProfileType $profile_type) {
//  return array(
//    'path' => 'admin/people/profiles/manage/' . $profile_type->id(),
//  );
//}

function profile2_type_load($id, $reset = FALSE) {
  return entity_load('profile2_type', $id, $reset);
}

function profile2_load_multiple(array $pids = NULL, $reset = FALSE) {
  if ($reset) {
    \Drupal::entityManager()->getStorage('profile2')->resetCache($pids);
  }
  return Profile::loadMultiple($pids);
}

function profile2_load($pid = NULL, $reset = FALSE) {
  if ($reset) {
    \Drupal::entityManager()->getStorage('profile2')->resetCache(array($pid));
  }
  return Profile::load($pid);
}

/**
 * Implements hook_permission().
 */
function profile2_permission() {
  $permissions = array(
    'administer profile types' => array(
      'title' => t('Administer profile types'),
      'restrict access' => TRUE,
    ),
    'bypass profile access' => array(
      'title' => t('Bypass profile access'),
      'description' => t('View and edit all user profiles, including private field values.'),
      'restrict access' => TRUE,
    ),
  );

  foreach (ProfileType::loadMultiple() as $type) {
    $permissions += array(
      "add own {$type->id()} profile" => array(
        'title' => t('%type: Add own profile', array('%type' => $type->label())),
      ),
      "add any {$type->id()} profile" => array(
        'title' => t('%type: Add any profile', array('%type' => $type->label())),
      ),
      "view own {$type->id()} profile" => array(
        'title' => t('%type: View own profile', array('%type' => $type->label())),
      ),
      "view any {$type->id()} profile" => array(
        'title' => t('%type: View any profile', array('%type' => $type->label())),
      ),
      "edit own {$type->id()} profile" => array(
        'title' => t('%type: Edit own profile', array('%type' => $type->label())),
      ),
      "edit any {$type->id()} profile" => array(
        'title' => t('%type: Edit any profile', array('%type' => $type->label())),
      ),
      "delete own {$type->id()} profile" => array(
        'title' => t('%type: Delete own profile', array('%type' => $type->label())),
      ),
      "delete any {$type->id()} profile" => array(
        'title' => t('%type: Delete any profile', array('%type' => $type->label())),
      ),
    );
  }
  return $permissions;
}

/**
 * Implements hook_user_view().
 */
/**
 * Implements hook_user_view().
 */
function profile2_user_view(array &$build, UserInterface $account, EntityViewDisplayInterface $display, $view_mode, $langcode) {
  // Only attach profiles for the full account view.
  if ($view_mode != 'full') {
    return;
  }
  // Position profiles at the bottom of account page.
  $weight = 100;
  foreach (\Drupal::configFactory()
             ->listAll('profile2.type.') as $config_name) {
    $config = \Drupal::config($config_name);

    $profiles = entity_load_multiple_by_properties('profile2', array(
      'uid' => $account->id(),
      'type' => $config->get('id'),
    ));

    if (isset($profiles)) {
      $build['profiles']['#weight'] = $weight + $config->get('weight');
      $build['profiles'][$config->get('id')] = array(
        '#theme' => 'profile_items',
        '#profile_items' => $profiles,
        '#profile_type' => $config->get('label'),
      );
    }
  }
  $build['#attached']['library'][] = 'profile2/drupal.profile2-items';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add available profile forms to the user registration form.
 *
 */
function profile2_form_user_register_form_alter(&$form, &$form_state) {
  $attachedProfileForm = FALSE;
  $weight = 90;
  foreach (\Drupal::configFactory()
             ->listAll('profile2.type.') as $config_name) {
    $config = \Drupal::config($config_name);
    $profileType = entity_load('profile2_type', $config->get('id'));
    if ($profileType->registration === TRUE && $profileType->hasFieldInstances() === TRUE) {
      if (empty($form_state['profiles'][$profileType->id()])) {
        $entity = entity_create('profile2', array(
          'type' => $profileType->id(),
          'langcode' => $profileType->language() ? $profileType->language() : \Drupal::languageManager()
            ->getDefaultLanguage()->id
        ));
        // Attach profile entity form.
        $form_state['profiles'][$profileType->id()] = $entity;
        $form_state['form_display_' . $profileType->id()] = EntityFormDisplay::collectRenderDisplay($entity, 'default');
        $form['entity_' . $profileType->id()] = array(
          '#type' => 'details',
          '#title' => $profileType->label(),
          '#tree' => TRUE,
          '#parents' => array('entity_' . $profileType->id()),
          '#weight' => ++$weight,
          '#open' => TRUE,
        );
        $form_state['form_display_' . $profileType->id()]->buildForm($entity, $form['entity_' . $profileType->id()], $form_state);

        $attachedProfileForm = TRUE;
      }
    }
  }
  if ($attachedProfileForm) {
    $form['actions']['submit']['#validate'][] = 'profile2_form_user_register_form_validate';
    $form['actions']['submit']['#submit'][] = 'profile2_form_user_register_form_submit';
  }
}

/**
 * {@inheritdoc]
 */
function profile2_form_user_register_form_validate(array &$form, array &$form_state) {
  foreach ($form_state['profiles'] as $bundle => $entity) {
    $form_display = $form_state['form_display_' . $bundle];
    $form_display->extractFormValues($entity, $form['entity_' . $bundle], $form_state);
    $form_display->validateFormValues($entity, $form['entity_' . $bundle], $form_state);
  }
}

/**
 * {@inheritdoc]
 */
function profile2_form_user_register_form_submit(array &$form, array &$form_state) {
  $account = $form_state['controller']->getEntity();
  foreach ($form_state['profiles'] as $bundle => $entity) {
    $entity->setOwnerId($account->id());
    $entity->save();
  }
}

/**
 * Returns a list of all the available profile types.
 *
 * This list can include types that are queued for addition or deletion.
 *
 * @return \Drupal\profile2\ProfileTypeInterface[]
 *   An array of profile type entities, keyed by ID.
 *
 * @see profile2_type_load()
 */
function profile2_type_get_types() {
  return entity_load_multiple('profile2_type');
}

/**
 * Implements hook_theme().
 */
function profile2_theme() {
  return array(
    'profile_items' => array(
      'variables' => array('profile_items' => NULL, 'profile_type' => NULL),
      'template' => 'profile-items',
    ),
  );
}

/**
 * Implements hook_preprocess_HOOK() for profile templates.
 */
function template_preprocess_profile_items(&$variables) {
  if (count($variables['profile_items'])) {
    $variables['title'] = String::checkPlain($variables['profile_type']);
    foreach ($variables['profile_items'] as $profile_item) {
      $variables['items'][] = entity_view($profile_item, 'default');
      $variables['edit_links'][] = \Drupal::linkGenerator()
        ->generateFromUrl(t('Edit'), new Url("profile2.account_edit_profile", array(
          'user' => \Drupal::currentUser()->id(),
          'type' => $profile_item->bundle(),
          'id' => $profile_item->id(),
        )));
      $variables['delete_links'][] = \Drupal::linkGenerator()
        ->generateFromUrl(t('Delete'), new Url("profile2.account_delete_profile", array(
          'user' => \Drupal::currentUser()->id(),
          'type' => $profile_item->bundle(),
          'id' => $profile_item->id(),
        )));
    }
  }
}
